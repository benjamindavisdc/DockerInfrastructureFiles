Make the script executable:

Set the executable permissions for the script file:


chmod +x startup.sh
Configure the server to run the script on startup:

Open the rc.local file using a text editor:


sudo nano /etc/rc.local
Add the following line to the file, before the exit 0 line, to execute the startup script on boot:


/path/to/startup.sh &
Replace /path/to/startup.sh with the actual path to your startup.sh script.
Save the file and exit the text editor.
Reboot the server:

Reboot the Amazon Linux 2 server to apply the changes:


sudo reboot






####################################



To use Terraform in combination with a startup script from a repository, you can follow these steps:

Set up your Terraform project:

Initialize a new Terraform project in a new directory by running terraform init.
Create a new Terraform configuration file, typically named main.tf, and define the necessary resources.
Define the EC2 instance resource:

Use the aws_instance resource in your Terraform configuration to provision the EC2 instance.
Configure the instance type, security groups, key pair, and other required attributes.
Configure user data:

Use the user_data argument within the aws_instance resource to provide the startup script.
Instead of pasting the base64-encoded script directly, you can retrieve the script from a repository using a curl or wget command within the user data.
For example:
hcl
Copy code
resource "aws_instance" "my_instance" {
  # ...
  user_data = <<-EOF
    #!/bin/bash
    curl -sSf https://raw.githubusercontent.com/your-repo/your-script.sh | bash
  EOF
}
Adjust the curl or wget command to fetch the startup script from your desired repository.
Run Terraform:

Run terraform apply to create and provision the infrastructure based on your Terraform configuration.
Terraform will deploy the EC2 instance, execute the startup script, and configure the server accordingly.